use std::fs;
use std::str;
use tar::Archive;
use std::sync::Arc;
use std::path::Path;
use serde_json::Value;
use once_cell::sync::Lazy;
use flate2::read::GzDecoder;
use std::io::{ self, Write };
use std::collections::HashMap;
use crate::base::defs::GlobalMap;

// Global static variable for diagonal_map
pub static DIAGONAL_MAP: Lazy<HashMap<u128, u64>> = Lazy::new(|| {
    let json_str = str
        ::from_utf8(include_bytes!("./diagonalMap.json"))
        .expect("Invalid UTF-8 in diagonalMap.json");

    serde_json::from_str(json_str).expect("Failed to deserialize diagonalMap.json")
});

// Global static variable for straight_map
pub static STRAIGHT_MAP: Lazy<HashMap<u128, u64>> = Lazy::new(|| {
    let json_str = str
        ::from_utf8(include_bytes!("./straightMap.json"))
        .expect("Invalid UTF-8 in diagonalMap.json");

    serde_json::from_str(json_str).expect("Failed to deserialize straightMap.json")
});

fn read_opening_db() -> Result<Value, io::Error> {
    let output_dir = "./db";
    let compressed_path = Path::new(output_dir).join("openings.tar.gz");
    let file_path = Path::new(output_dir).join("openingDB.json");

    if !file_path.exists() {
        println!("OpeningDB doesn't exist! Extracting from embedded archive...");

        fs::create_dir_all(output_dir)?;

        let mut file = fs::File::create(&compressed_path)?;
        file.write_all(COMPRESSED_OPENING_DB)?;
        println!("Compressed file written to: {:?}", compressed_path);

        let file = fs::File::open(&compressed_path)?;
        let tar = GzDecoder::new(file);
        let mut archive = Archive::new(tar);
        archive.unpack(output_dir)?;
        println!("Compressed file extracted to: {:?}", output_dir);

        fs::remove_file(&compressed_path)?;
    }

    let file_content = fs::read_to_string(&file_path)?;
    let json_data: Value = serde_json
        ::from_str(&file_content)
        .map_err(|e| io::Error::new(io::ErrorKind::InvalidData, e))?;
    Ok(json_data)
}

const COMPRESSED_OPENING_DB: &[u8] = include_bytes!("./openings.tar.gz");
pub static OPENING_DB: Lazy<Arc<Value>> = Lazy::new(|| {
    match read_opening_db() {
        Ok(data) => Arc::new(data),
        Err(e) => panic!("Error initializing opening database: {}", e),
    }
});

impl GlobalMap {
    pub fn diagonal_map(index: u8, opp_bit_map: u64) -> u64 {
        let mut hash: u128 = (opp_bit_map as u128) << 6;
        hash |= index as u128;
        *DIAGONAL_MAP.get(&hash).unwrap()
    }

    pub fn straight_map(index: u8, opp_bit_map: u64) -> u64 {
        let mut hash: u128 = (opp_bit_map as u128) << 6;
        hash |= index as u128;
        *STRAIGHT_MAP.get(&hash).unwrap()
    }

    pub fn opening_db() -> Arc<Value> {
        Arc::clone(&OPENING_DB)
    }

    /// **Forces full initialization at startup**
    pub fn init() {
        Lazy::force(&DIAGONAL_MAP);
        Lazy::force(&STRAIGHT_MAP);
    }

    // NOTE: All these assume that Index 0 === a1 ( Top-Left of the board )
    pub const PAWN_TABLE: [[i32; 8]; 8] = [
        [0, 0, 0, 0, 0, 0, 0, 0],
        [5, 10, 10, -20, -20, 10, 10, 5],
        [5, -5, -10, 0, 0, -10, -5, 5],
        [0, 0, 0, 20, 20, 0, 0, 0],
        [5, 5, 10, 25, 25, 10, 5, 5],
        [10, 10, 20, 30, 30, 20, 10, 10],
        [50, 50, 50, 50, 50, 50, 50, 50],
        [0, 0, 0, 0, 0, 0, 0, 0],
    ];

    pub const KNIGHT_TABLE: [[i32; 8]; 8] = [
        [-50, -40, -30, -30, -30, -30, -40, -50],
        [-40, -20, 0, 5, 5, 0, -20, -40],
        [-30, 5, 10, 15, 15, 10, 5, -30],
        [-30, 0, 15, 20, 20, 15, 0, -30],
        [-30, 5, 15, 20, 20, 15, 5, -30],
        [-30, 0, 10, 15, 15, 10, 0, -30],
        [-40, -20, 0, 0, 0, 0, -20, -40],
        [-50, -40, -30, -30, -30, -30, -40, -50],
    ];

    pub const BISHOP_TABLE: [[i32; 8]; 8] = [
        [-20, -10, -10, -10, -10, -10, -10, -20],
        [-10, 5, 0, 0, 0, 0, 5, -10],
        [-10, 10, 10, 10, 10, 10, 10, -10],
        [-10, 0, 10, 10, 10, 10, 0, -10],
        [-10, 5, 5, 10, 10, 5, 5, -10],
        [-10, 0, 5, 10, 10, 5, 0, -10],
        [-10, 0, 0, 0, 0, 0, 0, -10],
        [-20, -10, -10, -10, -10, -10, -10, -20],
    ];

    pub const ROOK_TABLE: [[i32; 8]; 8] = [
        [0, 0, 0, 5, 5, 0, 0, 0],
        [-5, 0, 0, 0, 0, 0, 0, -5],
        [-5, 0, 0, 0, 0, 0, 0, -5],
        [-5, 0, 0, 0, 0, 0, 0, -5],
        [-5, 0, 0, 0, 0, 0, 0, -5],
        [-5, 0, 0, 0, 0, 0, 0, -5],
        [5, 10, 10, 10, 10, 10, 10, 5],
        [0, 0, 0, 0, 0, 0, 0, 0],
    ];

    pub const QUEEN_TABLE: [[i32; 8]; 8] = [
        [-20, -10, -10, -5, -5, -10, -10, -20],
        [-10, 0, 5, 0, 0, 0, 0, -10],
        [-10, 5, 5, 5, 5, 5, 0, -10],
        [0, 0, 5, 5, 5, 5, 0, -5],
        [-5, 0, 5, 5, 5, 5, 0, -5],
        [-10, 0, 5, 5, 5, 5, 0, -10],
        [-10, 0, 0, 0, 0, 0, 0, -10],
        [-20, -10, -10, -5, -5, -10, -10, -20],
    ];

    pub const KING_TABLE_START: [[i32; 8]; 8] = [
        [20, 30, 10, 0, 0, 10, 30, 20],
        [20, 20, 0, 0, 0, 0, 20, 20],
        [-10, -20, -20, -20, -20, -20, -20, -10],
        [-20, -30, -30, -40, -40, -30, -30, -20],
        [-30, -40, -40, -50, -50, -40, -40, -30],
        [-30, -40, -40, -50, -50, -40, -40, -30],
        [-30, -40, -40, -50, -50, -40, -40, -30],
        [-30, -40, -40, -50, -50, -40, -40, -30],
    ];

    pub const KING_TABLE_END: [[i32; 8]; 8] = [
        [-50, -30, -30, -30, -30, -30, -30, -50],
        [-30, -30, 0, 0, 0, 0, -30, -30],
        [-30, -10, 20, 30, 30, 20, -10, -30],
        [-30, -10, 30, 40, 40, 30, -10, -30],
        [-30, -10, 30, 40, 40, 30, -10, -30],
        [-30, -10, 20, 30, 30, 20, -10, -30],
        [-30, -20, -10, 0, 0, -10, -20, -30],
        [-50, -40, -30, -20, -20, -30, -40, -50],
    ];

    pub const KNIGHT_MAP: [[u64; 8]; 8] = [
        [
            9077567998918656, 4679521487814656, 38368557762871296, 19184278881435648,
            9592139440717824, 4796069720358912, 2257297371824128, 1128098930098176,
        ],
        [
            2305878468463689728, 1152939783987658752, 9799982666336960512, 4899991333168480256,
            2449995666584240128, 1224997833292120064, 576469569871282176, 288234782788157440,
        ],
        [
            4620693356194824192, 11533718717099671552, 5802888705324613632, 2901444352662306816,
            1450722176331153408, 725361088165576704, 362539804446949376, 145241105196122112,
        ],
        [
            18049583422636032, 45053588738670592, 22667534005174272, 11333767002587136,
            5666883501293568, 2833441750646784, 1416171111120896, 567348067172352,
        ],
        [
            70506185244672, 175990581010432, 88545054707712, 44272527353856, 22136263676928, 11068131838464,
            5531918402816, 2216203387392,
        ],
        [
            275414786112, 687463207072, 345879119952, 172939559976, 86469779988, 43234889994,
            21609056261, 8657044482,
        ],
        [1075839008, 2685403152, 1351090312, 675545156, 337772578, 168886289, 84410376, 33816580],
        [4202496, 10489856, 5277696, 2638848, 1319424, 659712, 329728, 132096],
    ];

    pub const KING_MAP: [[u64; 8]; 8] = [
        [
            4665729213955833856, 11592265440851656704, 5796132720425828352, 2898066360212914176,
            1449033180106457088, 724516590053228544, 362258295026614272, 144959613005987840,
        ],
        [
            13853283560024178688, 16186183351374184448, 8093091675687092224, 4046545837843546112,
            2023272918921773056, 1011636459460886528, 505818229730443264, 216739030602088448,
        ],
        [
            54114388906344448, 63227278716305408, 31613639358152704, 15806819679076352,
            7903409839538176, 3951704919769088, 1975852459884544, 846636838289408,
        ],
        [
            211384331665408, 246981557485568, 123490778742784, 61745389371392, 30872694685696, 15436347342848,
            7718173671424, 3307175149568,
        ],
        [
            825720045568, 964771708928, 482385854464, 241192927232, 120596463616, 60298231808,
            30149115904, 12918652928,
        ],
        [3225468928, 3768639488, 1884319744, 942159872, 471079936, 235539968, 117769984, 50463488],
        [12599488, 14721248, 7360624, 3680312, 1840156, 920078, 460039, 197123],
        [49216, 57504, 28752, 14376, 7188, 3594, 1797, 770],
    ];

    pub const PAWN_MAP: [[[u64; 8]; 8]; 2] = [
        // White Pawn
        [
            [
                18014398509481984, 45035996273704960, 22517998136852480, 11258999068426240,
                5629499534213120, 2814749767106560, 1407374883553280, 562949953421312,
            ],
            [
                70368744177664, 175921860444160, 87960930222080, 43980465111040, 21990232555520, 10995116277760,
                5497558138880, 2199023255552,
            ],
            [
                274877906944, 687194767360, 343597383680, 171798691840, 85899345920, 42949672960,
                21474836480, 8589934592,
            ],
            [
                1073741824, 2684354560, 1342177280, 671088640, 335544320, 167772160, 83886080, 33554432,
            ],
            [4194304, 10485760, 5242880, 2621440, 1310720, 655360, 327680, 131072],
            [16384, 40960, 20480, 10240, 5120, 2560, 1280, 512],
            [64, 160, 80, 40, 20, 10, 5, 2],
            [0, 0, 0, 0, 0, 0, 0, 0],
        ],
        // Black Pawn
        [
            [0, 0, 0, 0, 0, 0, 0, 0],
            [
                4611686018427387904, 11529215046068469760, 5764607523034234880, 2882303761517117440,
                1441151880758558720, 720575940379279360, 360287970189639680, 144115188075855872,
            ],
            [
                18014398509481984, 45035996273704960, 22517998136852480, 11258999068426240,
                5629499534213120, 2814749767106560, 1407374883553280, 562949953421312,
            ],
            [
                70368744177664, 175921860444160, 87960930222080, 43980465111040, 21990232555520, 10995116277760,
                5497558138880, 2199023255552,
            ],
            [
                274877906944, 687194767360, 343597383680, 171798691840, 85899345920, 42949672960,
                21474836480, 8589934592,
            ],
            [
                1073741824, 2684354560, 1342177280, 671088640, 335544320, 167772160, 83886080, 33554432,
            ],
            [4194304, 10485760, 5242880, 2621440, 1310720, 655360, 327680, 131072],
            [16384, 40960, 20480, 10240, 5120, 2560, 1280, 512],
        ],
    ];
}
